package testline;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.plaf.basic.BasicTabbedPaneUI.MouseHandler;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Radhitya
 */
public class MainFrame extends javax.swing.JFrame {

    LineDrawing lineDraw = new LineDrawing();
    Point2D point = new Point2D.Double(210,210);
    
    Point2D p1 = new Point2D.Double(100, 100);
    Point2D p2 = new Point2D.Double(200, 200);
    Line2D line;
    AffineTransform tx = new AffineTransform();
    Polygon arrowHead = new Polygon(); 
    
    
    
    private MouseHandler mouseHandler = new MouseHandler();
    private boolean drawing;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        PanelDraw.addMouseListener(mouseHandler);
        PanelDraw.addMouseMotionListener(mouseHandler);
        arrowHead.addPoint( 0,5);
        arrowHead.addPoint( -5, -5);
        arrowHead.addPoint( 5,-5);
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelDraw = new javax.swing.JPanel()
        {
            public void paintComponent(Graphics g)
            {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setColor(Color.blue);
                g2d.setRenderingHint(
                    RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
                g2d.setStroke(new BasicStroke(8,
                    BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL));
            //g2d.fill(createArrowShape(p1,p2));
            g.drawLine((int)p1.getX(), (int)p1.getY(), (int)p2.getX(), (int)p2.getY());
            g2d.setColor(Color.red);
            line = new Line2D.Double(p1, p2);
            g.drawLine((int)point.getX(), (int)point.getY(), (int)point.getX(), (int)point.getY());
            drawArrowHead(g2d);

            LabelP1.setText("LP1: "+p1.getX()+", "+p1.getY());
            LabelP2.setText("LP2: "+p2.getX()+", "+p2.getY());
            LabelP.setText("LP: "+point.getX()+", "+point.getY());
        }
    };
    ButtonLine = new javax.swing.JButton();
    ButtonPoint = new javax.swing.JButton();
    ButtonOrientation = new javax.swing.JButton();
    ButtonReset = new javax.swing.JButton();
    LabelP1 = new javax.swing.JLabel();
    LabelP2 = new javax.swing.JLabel();
    LabelP = new javax.swing.JLabel();
    LabelOrientationC = new javax.swing.JLabel();
    LabelOrientationX = new javax.swing.JLabel();
    LabelOrientationY = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Line Testing");
    setBackground(new java.awt.Color(255, 255, 255));
    setName("FrameMain"); // NOI18N

    PanelDraw.setBackground(new java.awt.Color(255, 255, 255));

    javax.swing.GroupLayout PanelDrawLayout = new javax.swing.GroupLayout(PanelDraw);
    PanelDraw.setLayout(PanelDrawLayout);
    PanelDrawLayout.setHorizontalGroup(
        PanelDrawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 786, Short.MAX_VALUE)
    );
    PanelDrawLayout.setVerticalGroup(
        PanelDrawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 0, Short.MAX_VALUE)
    );

    ButtonLine.setText("Line");
    ButtonLine.setEnabled(false);
    ButtonLine.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ButtonLineActionPerformed(evt);
        }
    });

    ButtonPoint.setText("Point");
    ButtonPoint.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ButtonPointActionPerformed(evt);
        }
    });

    ButtonOrientation.setText("Orientation");
    ButtonOrientation.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ButtonOrientationActionPerformed(evt);
        }
    });

    ButtonReset.setText("Reset");
    ButtonReset.setEnabled(false);
    ButtonReset.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ButtonResetActionPerformed(evt);
        }
    });

    LabelP1.setText("LP1:");

    LabelP2.setText("LP2:");

    LabelP.setText("LP:");

    LabelOrientationC.setText("OrientationC:");

    LabelOrientationX.setText("OrientationX:");

    LabelOrientationY.setText("OrientationY:");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(PanelDraw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ButtonOrientation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ButtonPoint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ButtonLine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ButtonReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addComponent(LabelP1)
                .addComponent(LabelP2)
                .addComponent(LabelP)
                .addComponent(LabelOrientationC)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(LabelOrientationY, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LabelOrientationX, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addContainerGap(122, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(ButtonLine)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(ButtonPoint)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(ButtonOrientation)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(ButtonReset)
                    .addGap(80, 80, 80)
                    .addComponent(LabelP1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(LabelP2)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(LabelP)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(LabelOrientationC)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(LabelOrientationX)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(LabelOrientationY)
                    .addGap(0, 153, Short.MAX_VALUE))
                .addComponent(PanelDraw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );

    getAccessibleContext().setAccessibleName("FrameMain");

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private class MouseHandler extends MouseAdapter {

        @Override
        public void mousePressed(MouseEvent e) {
            drawing = true;
            p1 = e.getPoint();
            p2 = p1;
            repaint();
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            drawing = false;
            p2 = e.getPoint();
            repaint();
        }

        @Override
        public void mouseDragged(MouseEvent e) {
            if (drawing) {
                p2 = e.getPoint();
                repaint();
            }
        }
    }
    
    private void ButtonLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonLineActionPerformed
        Graphics g = PanelDraw.getGraphics();
        Graphics2D g2d = (Graphics2D) g;
        g2d.setColor(Color.blue);
        g2d.setRenderingHint(
            RenderingHints.KEY_ANTIALIASING,
            RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setStroke(new BasicStroke(8,
            BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL));
        
        Random rand = new Random();
        int min = 50, max = 400;
        int x1 = rand.nextInt(max - min + 1) + min;
        int y1 = rand.nextInt(max - min + 1) + min;
        int x2 = rand.nextInt(max - min + 1) + min;
        int y2 = rand.nextInt(max - min + 1) + min;
        
        line = new Line2D.Double(x1,y1,x2,y2);
        g.drawLine(x1, y1, x2, y2);
        System.out.println("Line2D: ("+line.getX1()+","+line.getY1()+"),("+line.getX2()+","+line.getY2()+")");
        System.out.println("LineXY: ("+x1+","+y1+"),("+x2+","+y2+")");
    }//GEN-LAST:event_ButtonLineActionPerformed

    private void ButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonResetActionPerformed
        repaint();
        LabelP.setText("LP:");
        LabelOrientationC.setText("Orientation:");
    }//GEN-LAST:event_ButtonResetActionPerformed

    private void ButtonPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPointActionPerformed
        /*Graphics g = PanelDraw.getGraphics();
        Graphics2D g2d = (Graphics2D) g;
        g2d.setColor(Color.red);
        g2d.setRenderingHint(
            RenderingHints.KEY_ANTIALIASING,
            RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setStroke(new BasicStroke(8,
            BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL));*/
        Random rand = new Random();
        int min = 50, max = 400;
        int x = rand.nextInt(max - min + 1) + min;
        int y = rand.nextInt(max - min + 1) + min;
        
        point = new Point2D.Double(x, y);
        
        repaint();
        /*g.drawLine(x, y, x, y);
        System.out.println("Point2D: "+point.getX()+","+point.getY());
        System.out.println("PointXY: "+x+","+y);
        LabelP.setText("LP: "+point.getX()+", "+point.getY());*/
    }//GEN-LAST:event_ButtonPointActionPerformed

    private void ButtonOrientationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonOrientationActionPerformed
        int orientC = new Line2D.Double(p1, p2).relativeCCW(point);
        System.out.println(orientC);
        if(orientC==-1)
        {
            LabelOrientationC.setText("OrientationC:\nClockwise");
        }
        else if(orientC==1)
        {
            LabelOrientationC.setText("OrientationC:\nCounter Clockwise");
        }
        else
        {
            LabelOrientationC.setText("OrientationC:\nCollinear");
        }
        
        int orientX=orientationX(point, line);
        if(orientX==-1)
        {
            LabelOrientationX.setText("OrientationX:\nLeft-Side");
        }
        else if(orientX==1)
        {
            LabelOrientationX.setText("OrientationX:\nRight-Side");
        }
        else
        {
            LabelOrientationX.setText("OrientationX:\nCollinear");
        }
        
        int orientY = orientationY(point, line);
        if(orientY==-1)
        {
            LabelOrientationY.setText("OrientationY:\nBelow");
        }
        else if(orientY==1)
        {
            LabelOrientationY.setText("OrientationY:\nAbove");
        }
        else
        {
            LabelOrientationY.setText("OrientationY:\nCollinear");
        }
        
    }//GEN-LAST:event_ButtonOrientationActionPerformed

    public double getM(double x1, double y1, double x2, double y2)
    {
        return (y2-y1)/(x2-x1);
    }
    
    public double getM(Point2D p1, Point2D p2)
    {
        return (p2.getY()-p1.getY())/(p2.getX()-p1.getX());
    }
    
    public double getM(Line2D line)
    {
        return (line.getY2()-line.getY1())/(line.getX2()-line.getX1());
    }
    
    public double getX(Point2D point, double m, double y)
    {
        return point.getX()+(y - point.getY())/m;
    }
    
    public double getY(Point2D point, double m, double x)
    {
        return m*(x-point.getX())+point.getY();
    }
    
    public int orientationY(Point2D point, Line2D line)
    {
        double y = getY(line.getP1(), getM(line), point.getX());
        if(y>point.getY())
        {
            System.out.println("Point: Above The Line"); //y coordinat in java is different
            return 1;
        }
        else if(y<point.getY())
        {
            System.out.println("Point: Under The Line"); //y coordinat in java is different
            return -1;
        }
        else
        {
            System.out.println("Point: Collinear"); //y coordinat in java is different
            return 0;
        }
    }
    
    public int orientationX(Point2D point, Line2D line)
    {
        double x = getX(line.getP1(), getM(line), point.getY());
        if(x>point.getX())
        {
            System.out.println("Point: Left Side"); //y coordinat in java is different
            return -1;
        }
        else if(x<point.getX())
        {
            System.out.println("Point: Right Side"); //y coordinat in java is different
            return 1;
        }
        else
        {
            System.out.println("Point: Collinear"); //y coordinat in java is different
            return 0;
        }
    }
    
    private void drawArrowHead(Graphics2D g2d) {  
    tx.setToIdentity();
    double angle = Math.atan2(line.getY2()-line.getY1(), line.getX2()-line.getX1());
    tx.translate(line.getX2(), line.getY2());
    tx.rotate((angle-Math.PI/2d));  

    Graphics2D g = (Graphics2D) g2d.create();
    g.setTransform(tx);   
    g.fill(arrowHead);
    g.dispose();
    }
    
    public Shape createArrowShape(Point2D fromPt, Point2D toPt) {
    Polygon arrowPolygon = new Polygon();
    arrowPolygon.addPoint(-6,1);
    arrowPolygon.addPoint(3,1);
    arrowPolygon.addPoint(3,3);
    arrowPolygon.addPoint(6,0);
    arrowPolygon.addPoint(3,-3);
    arrowPolygon.addPoint(3,-1);
    arrowPolygon.addPoint(-6,-1);


    Point2D midPoint = midpoint(fromPt, toPt);

    double rotate = Math.atan2(toPt.getY() - fromPt.getY(), toPt.getX() - fromPt.getX());

    AffineTransform transform = new AffineTransform();
    transform.translate(midPoint.getX(), midPoint.getY());
    double ptDistance = fromPt.distance(toPt);
    double scale = ptDistance / 12.0; // 12 because it's the length of the arrow polygon.
    transform.scale(scale, scale);
    transform.rotate(rotate);

    return transform.createTransformedShape(arrowPolygon);
    }

    private Point2D midpoint(Point2D p1, Point2D p2) {
        return new Point((int)((p1.getX() + p2.getX())/2.0), 
                         (int)((p1.getY() + p2.getY())/2.0));
    }
    /*PanelDraw = new javax.swing.JPanel()
        {
            public void paint(Graphics g)
            {
                super.paint(g);
                lineDraw.paint(g);
            }
        }
        ;*/
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonLine;
    private javax.swing.JButton ButtonOrientation;
    private javax.swing.JButton ButtonPoint;
    private javax.swing.JButton ButtonReset;
    private javax.swing.JLabel LabelOrientationC;
    private javax.swing.JLabel LabelOrientationX;
    private javax.swing.JLabel LabelOrientationY;
    private javax.swing.JLabel LabelP;
    private javax.swing.JLabel LabelP1;
    private javax.swing.JLabel LabelP2;
    private javax.swing.JPanel PanelDraw;
    // End of variables declaration//GEN-END:variables
}
